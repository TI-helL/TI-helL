# Flask vs FastAPI

### **FastAPI 사용의 장점은 무엇입니까?**

- FastAPI는 안정성, 보안 및 단순성에 중점을 둡니다. API를 쉽고 빠르게 구축할 수 있도록 설계되었습니다. 프로그래밍에 대한 지식이 필요하지 않으므로 프로그래머가 아닌 사람도 사용할 수 있습니다.
- FastAPI는 HTTP 요청, OAuth를 사용한 인증, XML/JSON 응답, SSL/TLS 암호화 등 많은 기능을 제공합니다. API의 동작에 따라 계정 설정을 사용자 지정할 수 있는 웹 인터페이스를 통해 관리됩니다.
- 내장된 모니터링 도구를 사용하여 API 사용을 모니터링할 수 있습니다. 응답 타임스탬프 만료 및 요청 수 제한과 같은 중요한 임계값에 도달하면 경고를 제공합니다.
- FastAPI 프레임워크는 Flask에 의존하는 API를 빌드하는 데 사용됩니다. Flask에서 기대할 수 있는 기능을 추가 기능과 함께 제공하는 웹 애플리케이션 프레임워크의 확장입니다.
- FastAPI는 처음부터 전체 애플리케이션을 빌드하거나 온라인에서 많은 상용구 생성기를 사용하는 것보다 툴킷 기반 접근 방식을 사용하려는 경우에 권장됩니다. 다른 도서관에서 아이디어를 빌립니다. 이는 다른 관련 라이브러리나 프레임워크에 익숙하다면 FastAPI 프레임워크를 쉽게 배우고 적응할 수 있음을 의미합니다.

### **FastAPI 사용의 단점은 무엇입니까?**

- FastAPI 프레임워크의 주요 단점은 비용이 많이 든다는 것입니다. 이것은 사용하는 국가와 매월 API 호출 수에 따라 다릅니다. 그러나 전반적으로 비용이 높습니다.
- 프로젝트를 확장하는 것은 어려울 수 있습니다. 처음부터 응용 프로그램이나 웹 사이트와 같이 더 큰 것으로 확장하려는 경우 코드가 PHP로 되어 있거나 [MySQL](https://www.turing.com/jobs/remote-mysql-developer) 또는 PostgreSQL을 사용하는 경우 문제가 발생합니다. Python과 함께 FastAPI를 사용하면 더 쉽지만 장기적 확장성을 위해 선택하는 프레임워크는 아닙니다.

### **Flask 사용의 장점은 무엇입니까?**

- 배우기 쉽고 많은 타사 라이브러리가 있는 Flask는 고급 기능이 필요한 프로젝트에 적합합니다. 이해하기 쉬운 작은 코드베이스가 필요합니다.
- Flask는 모든 요청에 네임스페이스를 제공하므로 애플리케이션에 전역 변수가 없도록 합니다. 객체가 속한 위치를 추적하는 데 도움이 됩니다. 또한 디버깅을 더 쉽게 만들고 코드를 작성할 때 필요한 것을 찾을 수 있습니다.
- Flask는 작업 방식을 제한하지 않습니다. 모든 요구 사항에 사용할 수 있는 도구 목록을 제공합니다. 그러나 이미 있는 것과 다른 것을 수행하려는 경우 그렇게 할 수 있습니다.

### **플라스크 사용의 단점은 무엇입니까?**

- Flask 프레임워크는 FastAPI와 비교할 때 복잡합니다. 이것은 배울 시간이 없거나 특정 기능을 수행하는 데 필요한 지식이 없는 사람들에게 문제가 될 수 있습니다. 여기에는 과거에 Python으로 작업한 적이 없는 사람들도 포함됩니다.
- FastAPI와 비교하여 Flask는 문서화가 덜 잘 되어 있습니다. 각 기능을 자세히 설명하는 가이드는 많지 않습니다. 모든 버전에는 애플리케이션에 더 많은 권한을 부여하는 비공개 메서드와 같은 새로운 기능이 함께 제공되기 때문에 이는 방해가 됩니다.
- Flask 프레임워크는 빠르지만 FastAPI 프레임워크만큼 빠르지는 않습니다. 이것은 당신이 속도가 필요하지 않은 작은 웹사이트를 만들고자 할 때 좋은 선택이 되지만, 속도가 필요한 프로젝트에는 적합하지 않습니다.